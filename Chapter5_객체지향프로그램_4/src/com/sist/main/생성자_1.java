/*
 * 		자바 클래스의 구성 => 객체지향 특성(접근지정어, 캡슐화, 재사용, 수정, 추가)
 * 								  --------
 * 			 		public / protected / default / private 
 * 					1)변수 2)메소드 3)생성자
 * 						캡슐화 : 데이터 보호 => 모든 변수는 private로 선언됨
 * 						재사용 : 변경해서 사용, 있는 그대로 사용
 * 							 	상속(is-a)  포함(has-a)
 * 						수정 : 오버라이딩, 추가 : 오버로딩
 * 		class ClassName
 * 		{
 * 			-------------------------------------------------------------------------------
 * 			변수
 * 			1. 멤버변수(인스턴스변수 => new를 이용해서 메모리에 저장할 때 따로 저장되는 변수)
 * 				형식 : [접근지정어] 데이터형 변수명 = 값 (값을 설정하지 않으면 디폴트값)
 * 					int a; => 0
 * 					int a = 10; => 명시적인 초기화
 * 
 * 					int a;
 * 					a = 10; => 구현 (오류남, 클래스는 구현x) ==> 변수의 초기화를 가능하게 해주는 생성자
 * 					=> 생성시점 : new를 이용해서 메모리 공간이 확보 됐을때
 * 					=> 소멸시점 : 객체가 null값이거나 사용하지 않는 경우
 * 							   ---------- 가비지컬렉션(gc)에 의해 소멸됨(=> 메모리 회수하는 역할)
 * 					=> 사용하는 방법
 * 						class A
 * 						{
 * 							int age; // 0
 * 							String name; // null
 * 						}
 * 						A a = new A(); => age, name이라는 공간 확보
 * 							=> a.age / a.name
 * 							a : 객체, 인스턴스(메모리에 저장된 상태)
 * 						A b = new A();
 * 							=> b.age / b.name
 * 						========================> class는 한개만 설계, 저장은 new를 이용해서 여러개~
 * 					=> 저장된 데이터관리 위치가 변경될 수 있다(=주소값 대입이 가능하다)
 * 					  ------------------------------> 메모리 주소의 복구가 어려움 => 데이터 손실
 * 				↑ 가장 많이 사용되는 변수 (여러개를 저장)
 * 
 * 			2. 정적변수(클래스변수, 공유변수) => 한개의 공간만 생성 => 오라클은 거의 공유변수를 씀
 * 				형식 : [접근지정어] static 데이터형 변수명 = 값 (마찬가지로 값을 설정하지 않으면 디폴트값)
 * 				=> 생성시점 : 컴파일러에 의해 자동으로 메모리에 저장(=> new가 없어도 사용이 가능하다)
 * 				=> 소멸시점 : 객체가 null값이거나 사용하지 않는 경우
 *  		-------------------------------------------------------------------------------
 *  		생성자 : 
 *  			1) 객체가 생성될 때 호출되는 메소드
 *  			A a = new A()
 *  					 ----- 생성자
 *  			2) 특징
 *  			= 클래스명과 동일하다
 *  			= 리턴타입이 없다
 *  			= 생성자가 없는 경우에 추가(매개변수가 없는 생성자가 추가 => 기본 생성자)
 *  			= 멤버변수의 초기화
 *  			= 생성자는 여러개 사용이 가능
 *  			= 데이터베이스 연결, 네트워크 연결, 윈도우...
 *  			= 자동 추가 (import => java.lang.*, class A => extends Object, 생성자 => 기본생성자(), return => void)
 *  			class A
 *  			{
 *  				A(){} ***
 *  				void A(){} : 일반 메소드임
 *  				A(int a){} ***
 *  				A(int a, int b){} ***
 *  			}
 *  			3) 역할
 *  			= 시작과 동시에 처리
 *  				ex) 자동 로그인
 *  					오라클 연결
 *  					서버 연결
 *  			= 멤버변수의 초기화
 *  			class A
 *  			{
 *  				int a;
 *  				A()
 *  				{
 *  					a=10; // 파일 읽기, 크롤링...
 *  					= 구현해서 초기화할 때
 *  				}
 *  			}
 *  			= 필요할 때마다 사용한다 (생략할 수 있다)
 *  							  -------------> 컴파일러에 의해 자동으로 추가
 *   		-------------------------------------------------------------------------------
 *   		메소드
 *   		1. 역할 : 다른 클래스와 통신(연결)
 *   		2. 수정(오버라이딩), 추가(오버로딩) 
 *   		3. 반복제거
 *   		4. 구조적인 프로그램 짤 때(=> 단락을 나눠서 처리) => 오류 처리, 수정이 편리하기 때문
 *   		5. 메소드는 호출시마다 처음부터 끝까지 수행
 *   		6. 구성 요소
 *   			결과값(리턴타입) 메소드명(매개변수(사용자 요청값))
 *   			=> 사용자의 요청값을 받아서 요청 처리 결과값을 도출***
 *   			
 *   			결과값(리턴타입)으로 사용되는 데이터형
 *   			1) 기본형
 *   				int, double, char, boolean, long...
 *   			2) 배열 : 같은 데이터형 여러개~
 *   			3) 클래스 : 다른 데이터형 여러개~
 *   				String, 사용자 정의
 *   				클래스도 배열로 사용이 가능하다(데이터형)
 *   				기본형 : 자바에서 지원 => 지원하지 않는 것이 많음
 *   				=> 프로그래머가 만들어서 처리 => 클래스
 *   				형변환, 대입, 연산처리가 가능하다(=> 기본형과 동일하게 사용할 수 있음)
 *   			
 *   			메소드명 : 식별자 => 변수, 클래스, 인터페이스, 메소드(규칙 다 동일함)
 *   				=> 변수, 메소드는 소문자로 시작하는걸 권장
 *   				=> 클래스, 인터페이스는 대문자로 시작하는걸 권장
 *   				=> 문자길이는 제한이 없지만 3~10자 쓰는걸 권장
 *   				=> 한글은 가급적 사용하지 않는다(리눅스에서 깨짐)
 *   			
 *   			매개변수
 *   			최소화 시킨다(3개 이상이면 => 배열, 클래스)
 *   			ex)
 *   				정수 10개를 보내주고 정렬해달라
 *   				(int a, int b...) < (int[] arr)
 *   				회원가입
 *   				(String id, String pwd, String name,
 *   				String sex, int age, String post, String addr1,
 *   				String addr2, String tel, String email...)
 *   				< (Member m)=>클래스
 *    		-------------------------------------------------------------------------------
 *    	메소드 형식
 *    	[접근지정어][옵션] 리턴타입 메소드명(매개변수...) // 선언부
 *    	{
 *    		// 구현부
 *    		옵션 : static, abstract, final
 *    		return 값 => void일 경우에는 생략 가능
 *    	}
 *    
 *    	}
 */
package com.sist.main;

public class 생성자_1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		생성자_1 a = new 생성자_1();
		System.out.println(a.toString());

	}

}
