/*
 * 		변수 : 한개의 데이터 저장하는 메모리 공간의 이름
 * 			= 지역변수(메소드안에 선언하는 변수)
 * 				Stack에 저장, {}을 종료하면 자동으로 사라지는 변수
 * 				단점 : 반드시 초기화를 시킨 후 사용해야한다.
 * 				scope 사용범위 -> {}안에서만
 * 			= 매개변수 : 메소드
 * 			= 공유변수 : 클래스
 * 			= 멤버변수 : 클래스
 * --------------------------------------------------------------
 * 		데이터형
 * 			= 기본형(자바지원)
 * 				정수 : byte, int, long
 * 				실수 : double
 * 				문자 : char
 * 				논리 : boolean
 * 			= 참조형(사용자 정의) => 배열, 클래스
 * --------------------------------------------------------------
 * 		데이터 가공
 * 		=> 연산자
 * 			단항연산자 : ++(전치, 후치 주의), ()->형변환연산자, !
 * 			이항연산자 : +, -, *, /, %, ==, !=, <, >, <=, >=, &&, ||, +=, =, -=
 * 				=> 1. char는 연산시에 정수형으로 변경된다.
 * 				   2. int이하는 연산시에 결과값으로 int가 나온다.
 * 				   3. 모든 연산은 같은 데이터형끼리만 할 수 있다.
 * 				   4. 비교연산자는 기본형만 가능하다.(=문자열은 비교연산자를 사용하지 않는다. => equals)
 * 					  boolean은 ==, !=만 사용이 가능
 * 				   5. &&, ||는 효율적인 연산을 한다.
 * 		데이터 흐름
 * 		=> 제어문
 * --------------------------------------------------------------
 * 		데이터를 관련된 것끼리 묶어서 관리 : 배열, 클래스
 * 			- 배열 : 같은 데이터끼리
 * 			- 클래스 : 다른 데이터도 가능
 * 		관련된 명령어끼리 묶어서 처리 : 메소드
 * -------------------------------------------------------------- -> Component(class)
 * 		데이터만 묶은 클래스 : ~VO 
 * 		기능만 묶는 클래스 : ~DAO, ~Manager, ~Service
 * 		혼합 클래스 : ~Model, ~Controller
 * 
 */
public class 제어문_정리 {

	public static void main(String[] args) {
		int a=10;
		if(a==10)
		{
			int b=20;
			{
				int c=30;
				{
					int d=40;
				}
				//System.out.println(d); → 블록을 벗어났기 때문에 사라짐
			}
		}

	}

}
