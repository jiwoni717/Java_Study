/*
 * 	1장 자바의 특징
 * 	------------
 * 	1)특징
 * 	  = 운영체제의 독립적(모든 운영체제의 호환성이 좋다.)
 * 		 ex)윈도우에서 작성 => 리눅스에서 사용 가능
 * 		   C/C++ => 소스 작성 => 컴파일
 * 							   .obj
 * 							운영체제마다 다르다
 * 		   Java => 소스 작성 => 컴파일
 * 							 .class
 * 							운영체제마다 동일한 파일 생성(=호환성이 뛰어남)
 * 
 * 		**자바 실행
 * 		A.java =============> A.class ===================> 실행 화면 출력
 * 				컴파일(javac) 바이트(2진파일)  인터프리터(java)
 * 				두번의 검증을 거치기 때문에 보안이 상당히 뛰어나다.
 * 
 * 		= 객체 지향 프로그램 (재사용이 편리한 상태) => 유지보수(대규모 프로그램)
 * 		  재사용 : 수정, 추가가 가능해야함, 데이터 보호 (캡슐화) => 5장에서
 * 				--------- 오버라이딩 / 오버로딩
 * 				포함 (수정할 내용이 없는 경우) => has-a
 * 				상속 (수정할 내용이 있는 경우) => is-a
 * 
 * 		= 비교적 배우기 쉬움
 * 		 C/C++에서 파생 => 포인터(메모리 주소), 구조체, 다중 상속, 지원하는 API가 미약
 * 		  => 자바언어 => 강력한 API를 가지고 있다.(=필요한 기능이 이미 내장이 되어있음)
 * 			 ------ 조립식(자바 공부 => 직접 구현해보는 것이 중요)
 * 
 * 		= 자동 메모리 관리(가비지 컬렉션)
 * 
 * 		= 네트워크 / 분산 / 멀티스레드 기능을 가지고 있음
 * 
 * 		2. 소스 코딩 방법
 * 			프로그램은 명령어(JVM) => 명령어 뒤에 ;(세미콜론) 확인
 * 			대소문자를 구분한다.
 * 			{}을 사용
 * 			들여쓰기
 * 			== 구성요소
 * 				1) 클래스명 : 첫자는 대문자
 * 				2) 변수 : 소문자 시작
 * 				3) 상수 : 전체가 대문자
 * 				4) 메소드 : 소문자
 * 				5) 생성자 : 클래스명과 동일
 * 
 * 			공부
 * 			1) 데이터 저장 방법 : 변수 / 상수
 * 				----------- 메모리 저장(메모리 크기 결정) => 기본형(데이터형)
 * 				----------- 사용자 정의 : 참조형(배열, 클래스)		
 * 			2) 데이터 가공
 * 				연산자 / 제어문
 * 			------------------------------기본 문법
 * 			3) 관련된 데이터를 모아서 관리 : 배열
 * 			4) 관련된 명령어를 모아서 관리 : 메소드
 * 			5) 데이터 / 명령어를 동시에 관리 : 클래스
 * 			6) 객체 지향 프로그램
 * 			7) 프로그램이 비정상 종료를 방지 / 오류를 처리 => 예외처리
 * 			=================================================== 자바 기본
 * 			8) 자바에서 지원하는 라이브러리
 * 
 * 		3. 자바의 구성
 * 			package : 한번만 사용 => 위치 확인
 * 			import : 기존에 만들어진 클래스를 불러온다. (여러개를 사용할 수 있음)
 * 			-------------------------------------------------------
 * 			class ClassName{
 * 				----------------
 * 				 변수 설정
 * 				----------------
 * 				 생성자
 * 				----------------
 * 				 메소드
 * 				----------------
 * 				public static void main(Stirng[] arg)
 * 				{
 * 					기본 문법
 * 				}
 * 			}
 * 			1. 기본 형식 2. 활용 (알고리즘)
 * 
 * 
 * 			변수
 * 			=> 한개의 데이터를 저장하는 메모리 공간
 * 			=> 사용법
 * 				데이터형 변수명=값;
 * 			=> 변수명 식별자 : 변수 => 같은 이름을 사용할 수 없음
 * 				1) 알파벳, 한글로 시작한다. (알파벳은 대소문자를 구분한다)
 * 				2) 숫자 사용이 가능하다. (단, 맨앞에 사용 금지)
 * 				3) 특수문자 사용이 가능하다. ( _ , $ )
 * 					a_b, _a... (임시변수, 단어가 2개인 경우)
 * 				4) 키워드는 사용할 수 없다. (키워드 = 자바에서 사용하는 단어)
 * 				   => 빨간색으로 표시
 * 				5) 길이 제한이 없다.
 * 				   변수 => 의미가 약간 부여
 * 			========================================================
 * 			과일 가게에는 사과 5개, 배 10개, 바나나 7개, 딸기 1개 => 과일 이름을 변수
 * 
 * 		저장시에는 반드시 앞에 메모리 크기 지정
 * 		기본형(자바에서 지원)
 * 		참조형(사용자 정의) => 배열 / 클래스
 * 		-----------------------------
 * 		기본형
 * 		----
 * 		 정수 저장 방법
 * 			1byte => byte  // 네트워크 전송, 파일 읽기...
 * 			2byte => short // C언어와 호환
 * 			4byte => int   // 평상시에 사용하는 모든 정수(default)
 * 			8byte => long
 * 		 실수 저장 방법
 * 			4byte => float => 소수점 6자리
 * 			8byte => double(default) => 소수점 15자리
 * 			 10.5F 10.5D(D는 생략이 가능)
 * 		 문자 저장 방법
 * 			2byte => char
 * 			 => 1byte(싱글바이트 => 아스키코드) / 2byte(멀티바이트 => 유니코드)
 * 				한글이나 중국, 독일, 일본.... => 한글자당 바이트가 2byte
 * 			 byte => bit(8) => 256문자
 * 			 byte => bit(16) => 65535문자
 * 			각 문자마다 번호를 가지고 있음 => 아스키코드값
 * 		 논리 저장 방법
 * 			true / false만 저장 => 1byte => boolean
 * 		 자동 지정(jdk 10이상)
 * 			var a = 10 => a : int
 * 			var b = 10.5 => b : double
 *			var c = 'A' => c : char
 *
 *		=> 저장이 가능한 데이터
 *		byte => -128 ~ 127
 *		1byte
 *		--------------------------------
 *		 0 | 1 | 1 | 1 | 1 | 1 | 1 | 1 |
 *		--------------------------------
 *		맨 앞은 부호비트(0 : 양수, 1 : 음수)
 *
 *		2byte => -32768 ~ 32767 => short
 *		4byte => -21억 4천 ~ 21억 4천 => int
 *		8byte => long
 *
 *
 *		변수
 *		데이터형 변수명 = 값;
 *
 *		값을 부여 크기에(=데이터형) 맞게 넣는다.
 *		int a = 10.5; ==> 오류
 *
 *		데이터형 크기
 *		byte < short < int < long < float < double  (=> 실수가 정수보다 크다)
 *			   char
 *
 *
 * 
 * 
 */
public class 변수 {

	public static void main(String[] args) {
		
//		int a = 123456;
//		double b = 123456.78;
//		int c = (int)((b-a)*100);
//		System.out.println(c);
		
		//*****
		byte byte_value = 127;  // -128 ~ 127
		// 127을 byte_value라는 공간에 첨부해라 => 오른쪽에서 왼쪽으로 이동
		short short_value = 32767; // -32768 ~ 32767
		//*****
		int int_value = 2140000000;
		//*****
		long long_value = 9999999999999999l; //모든 정수를 int로 인식하기 때문에 집어넣는 값 뒤에 l을 써넣는다.(이때 대소문자 상관 없음!)
		char char_value = '홍';
		float float_value = 10.5f; //모든 실수를 double로 인식하기 때문에 집어넣는 값 뒤에 f를 써넣는다.(마찬가지로 대소문자 상관 없음)
		//*****
		double double_value = 10.5;
		//*****
		boolean boolean_value = true;
		// 모든 정수는 int로 실수는 double로 인식한다.
		// 지역변수는 반드시 초기값을 부여한 후에 사용 가능
		
		/*
		 * 	변수
		 * 	 = 멤버변수
		 * 	 = 공유변수
		 * 	 ---------- 프로그램 종료시까지 메모리 유지 => 자동 초기화
		 * 	 = 지역변수
		 * 	 ---------- 블록이 종료되면 사라지는 변수 => 직접 초기화
		 * 
		 * 	class A
		 * 	{
		 * 		---------------
		 * 		멤버변수 / 공유변수
		 * 		---------------
		 * 		publc static void main(Stirng[] arg)
		 * 		{
		 * 			-------------
		 * 			지역변수 main(){}안에서 사용이 가능 => 반드시 초기화를 한다.
		 * 			-------------
		 * 		}
		 * 	}
		 * 
		 * 	변수 => 변경이 가능
		 * 	상수 => 변경할 수 없다. (고정)
		 */
		// 변수 => 데이터형 변수명 = 값 int a = 10;
		// 상수 => 데이터형 변수명 = 값 final int b = 20;
		
		int kor = 80;
		kor = 90;
		kor = 100;
		
		final int SCORE = 70; //상수는 변수명을 모두 대문자로
		// =(대입) / ==(같다) / !=(같지않다) JavaScript => =,===,!==
		// 오라클 (=)
		/*
		 *	변수
		 *	선언
		 *	초기화
		 *
		 *	선언
		 *	int a;
		 *	a = 10;
		 *
		 *	int a = 10;
		 *	=> 선언과 동시에 초기화
		 *
		 *	=> int a;ㄴ
		 *	   int b;
		 *	   int c;
		 *		===> int a, b, c;
		 *
		 *	   int a = 10;
		 *	   int b = 20;
		 *	   int c = 30;
		 *		===> int a = 10, b = 20, c = 30;
		 *		데이터형이 같을 때만 묶어 쓸 수 있다.
		 */
		
		// 자동 지정 변수
//		var a = 100; // == int a = 100;
//		var b = 10.5; // == double b = 10.5
//		var c = 'A'; // == char c = 'A'
//		c = 97; //char은 int와 호환
//		
//		System.out.println(c);
		
		int a = 10;
		int b = 20;
		int temp = a;
		a = b;
		b = temp;
		
		System.out.println("a = "+a);
		System.out.println("b = "+b);
		/*
		 * 	
		 */
		

	}

}
